name: Makefile CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Install dependencies
        run: make install

      - name: Building CORE
        run: make build-core

      - name: Building CLI
        run: make build-cli

      - name: Building Web App
        run: make build-webapp

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3

      - name: Install dependencies
        run: make install

      - name: Building CORE
        run: make build-core

      - name: Run CORE tests
        run: make test-core

      - name: Run CLI tests
        run: make test-cli

      - name: Create .env file
        run: |
          touch .env
          echo "POSTGRES_HOST="$POSTGRES_HOST >> .env
          echo "POSTGRES_PORT="$POSTGRES_PORT >> .env
          echo "POSTGRES_USER="$POSTGRES_USER >> .env
          echo "POSTGRES_PASSWORD="$POSTGRES_PASSWORD >> .env
          echo "POSTGRES_DATABASE="$POSTGRES_DATABASE >> .env
          echo "PORT="$PORT >> .env
          echo "RUN_MIGRATIONS="$RUN_MIGRATIONS >> .env
          cat .env

      - name: Run postgres docker
        run: docker-compose -f "docker-compose.dev.yml" up -d --build

      - name: Checking container
        run: docker ps -a

      - name: Run Webapp unit tests
        run: make unit-test-webapp

      - name: Run Webapp e2e tests
        run: make e2e-test-webapp
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOS }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DATABASE: ${{ secrets.POSTGRES_DATABASE }}

  deploy:
    name: Deploy
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/aws.key
          chmod 400 ~/.ssh/aws.key
          cat >>~/.ssh/config <<END
          Host aws
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/aws.key
            StrictHostKeyChecking no
          END
        shell: bash
        env:
          SSH_USER: ${{ secrets.AWS_SSH_USER }}
          SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
          SSH_HOST: ${{ secrets.AWS_SSH_HOST }}

      - name: Deploy
        run: ssh aws 'cd ~/kamon && git pull && docker-compose stop && docker-compose build && docker-compose up -d && docker builder prune'
